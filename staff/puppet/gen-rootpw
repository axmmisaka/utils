#!/usr/bin/env python3
import crypt
import subprocess
import sys
from getpass import getpass
from hmac import compare_digest


WARNING_MESSAGE = """\
################################################################################
This will generate a new password hash, but not update it across machines

To do that, you will need to put this new password hash into the puppet
private hiera file. Do NOT do this without input from others!
################################################################################
"""


def main():
    print(WARNING_MESSAGE)

    password = getpass('New password: ')
    password_confirm = getpass('New password confirmation: ')

    if password != password_confirm:
        print('Password and confirmation do not match, please try again')
        sys.exit(1)

    hashed_password = subprocess.check_output(
        ('mkpasswd', '-m', 'sha-512', '-R', '65536', password),
    ).decode('utf-8').strip()

    # Check that the hash from mkpasswd matches one generated through python as
    # an extra sanity check
    hashed_array = hashed_password.split('$')
    hashed_confirmation = crypt.crypt(
        password,
        '${}${}${}'.format(hashed_array[1], hashed_array[2], hashed_array[3]),
    )

    if not compare_digest(hashed_password, hashed_confirmation):
        print('Password hash generated by python did not match that generated')
        print("by mkpasswd, make sure that there aren't any newlines, etc. in")
        print('your password')
        sys.exit(2)

    print('Here is the new password hash, go update ocf::root_password in puppet:')
    print(hashed_password)


if __name__ == '__main__':
    sys.exit(main())
