#!/bin/bash

# Creates symlink to user's webroot. If the symlink exists and files
# are present in webroot, they are backed up in the user's home directory.
# A user's database is created or, if it already exists, the password
# is reset. WordPress is installed and the wp-config file is filled
# out with the requisite information. Further configuration can be
# done by the user from a browser.
#

set -euo pipefail
shopt -s dotglob

if ! [[ "$(hostname)" =~ (dev-)?tsunami ]]; then
    echo -e '\033[1;31mYou must run this command on tsunami.\033[0m'
    exit 1
fi

echo -e "\033[33mWARNING: This script should generally be run on a fresh account!\033[00m"
echo -e "A user with an existing website or database will have their files
backed up, but their database password will change and the WordPress
install may migrate and reuse existing tables.\n"

read -rp "Are you sure you want to continue? [y/N] " idunno
idunno=${idunno,,}
if ! [[ "$idunno" =~ ^(yes|y) ]]; then
    echo "Ok, bye!"
    exit 0
fi

webroot=$HOME/public_html
user=$(whoami)

# Create symlink to webroot
makehttp
cd "$webroot"

# Check if user has files and let user decide what they want to do.
if [[ -n "$(ls -A)" ]]; then
    echo
    echo -e "\033[33mThere are currently files in webroot! These will be backed up.\033[00m\n"
    read -rp "Do you want to continue? [y/N] " whoknows

    whoknows=${whoknows,,}
    if [[ "$whoknows" =~ ^(yes|y) ]]; then
        ts=$(date +"%Y-%m-%d_%H:%M:%S")
        backup="$HOME/public_html-$ts"
        mkdir -p "$backup"
        echo "Moving current files to $backup ..."
        # Note that dotglob is set so hidden files are moved too
        mv ./* "$backup"
    else
        echo "Ok, bye!"
        exit 0
    fi
fi

# Get SQL password
echo "Resetting database password..."
sqlpass=$(echo "yes" | makemysql | tail -n 1 | grep -Po '(?<=: )([0-9a-zA-Z]){24,}$')
if [[ -z "$sqlpass" ]]; then
    echo -e "\033[31mError:\033[00m Could not retrieve database password. Run makemysql to see the issue."
    exit 1
fi
echo "SQL set up and the password can be found in wp-config.php ..."

tables=$(mysql --user="$USER" --password="$sqlpass" --execute="show tables" "$USER" | grep -E "^wp_" || echo "")
if ! [[ -z "$tables" ]]; then
    echo
    echo -e "\033[33mThere appears to be an existing WordPress installation. Would you like to clean the database?\033[00m\n"
    read -rp "Do you want to continue? [y/N] " wordpresskiller
    wordpresskiller=${wordpresskiller,,}
    if ! [[ "$wordpresskiller" =~ ^(yes|y) ]]; then
        echo "If you want to run this script and keep the tables intact, rename the existing tables from wp_* to something else."
        exit 0
    fi

    echo "$tables" | tr ' ' '\n' | while read -r table; do
        mysql --user="$USER" --password="$sqlpass" --execute="DROP TABLE $table" "$USER"
    done
fi

# Install WordPress and create config file
wp core download
wp config create --dbname="$user" --dbuser="$user" --dbpass="$sqlpass" --dbhost=mysql --dbcharset=utf8mb4
# Somehow 644 is the default... See https://core.trac.wordpress.org/ticket/37264
chmod 600 "$webroot/wp-config.php"
echo "WordPress install successful. Go to https://www.ocf.berkeley.edu/~$user to finish the setup process."
